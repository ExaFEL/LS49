Complete instructions to test nanoBragg + Sauter simulations + DIALS. Purpose:
1) Develop with confidence that nothing has broken
2) Use regression tests for port to peta- and exascale

Pre-requisites.
1) Linux box with many cores (like 64).  Use bash shell.
2) untar big data file from Nick "ls49_big_data.tgz". export LS49_BIG_DATA=<untarred directory path>
3) Python dependency state file "dials_env.txt"
4) Make sure your conda environment file (~/.condarc) has the following:
channels:
  - cctbx
  - conda-forge 
  - defaults
  - bioconda

report_errors: false
5) Create and change to a working directory ${WORK}

Download three files to configure the environment
  (cctbx bootstrap installer, and conda-Python dependency definitions, and
  miniconda installer [tested with conda 4.5.2]):

wget https://raw.githubusercontent.com/cctbx/cctbx_project/master/libtbx/auto_build/bootstrap.py --no-check-certificate
wget https://raw.githubusercontent.com/nksauter/LS49/master/tests/dials_env.txt --no-check-certificate
wget https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh
chmod u+x Miniconda2-latest-Linux-x86_64.sh
./Miniconda2-latest-Linux-x86_64.sh
# install in directory ${WORK}/miniconda2
# do not prepend Miniconda2 to .bashrc

source miniconda2/etc/profile.d/conda.sh
conda create -y --name myEnv --file dials_env.txt
conda activate myEnv

python -m pip install procrunner

#sources have already been installed in modules directory
#python bootstrap.py hot --builder=dials
#python bootstrap.py update --builder=dials
#python bootstrap.py build --builder=dials --with-python=`which python` --nproc=16

mkdir build
cd build
which python # verify that you are using the miniconda myEnv python
python ../modules/cctbx_project/libtbx/configure.py --enable_openmp_if_possible=True LS49 dials_regression xfel_regression labelit_regression prime iota

source build/setpaths.sh
cd build; make;cd -
mkdir tests3
cd tests3
rm -rf *
export OMP_NUM_THREADS=8
libtbx.python ../cctbx-test-nightly-all.py



